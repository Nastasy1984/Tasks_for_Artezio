Система представляет собой приложение по расчету индивидуального графика прививок для детей.

Потенциальные клиенты: государственные и частные клиники.

Решаемые задачи: приложение помогает врачам-педиатрам расчитать индивидуальный график прививок 
для каждого ребенка. 

При этом:
- Базовый график расчитывается по дате рождения в соответствии с рекомендациями 
Российского национального календаря прививок. 
- В базу данных заносится информация о датах уже сделанных прививок для каждого пациента мед. учреждения.
- В зависимости от реальных дат сделанных прививок приложение позволяет пересчитывать (корректировать) 
индивидуальный график с учетом рекомендуемых в инструкциях к вакцинам сроков промежутка между вакцинами. 

Приложение будет создано с использованием Сервера приложений J2EE, как наиболее распространенного сервера 
бизнес-приложений, предоставляющего широкий перечень возможностей для разработчика.

1 компонент - клиентский UI реализованный в браузере 
Отвечает за представление данных.

Описание: 
При открытии приложения пользователь попадает на стартовую страницу, где ему прилагается ввести логин и пароль
(для каждого врача свой). Приложение обращается к Базе Данных (БД) Пользователей (Users, содержащей таблицы 
Users и Roles) данной клиники, проверяя данные на соответствие и определяя роль пользователя.

Пользователь имеет возможность начать поиск пациента в базе по вводу Фамилии Имени и Даты рождения. 
При отсутствии данного пациента в БД пользователю выводится предложение создать нового пациента.

При этом приложение на основе введенных данных (Фамилии, Имени и Даты Рождения) вносит запись в БД Пациентов, 
дополнительно запрашивает, например, контактные данные пациента и привязывает его к врачу, внесшему данные.
А также расчитывает и выводит на экран базовый график прививок, расчитанный с использованием даты рождения и 
данных в формате JSON, в котором хранятся стандартные сроки прививок с отсчетом от даты рождения, основанные на 
Национальном Календаре прививок.

В случае, если данные о пациенте хранятся уже в базе данных, на экран выводится информация об уже сделанных прививках с их
реальными датами и расчитанный на их основе график дальнейших прививок. 

Рядом с каждой прививкой есть флажок выбора "Сделана". При нажатии на этот флажок появляется всплывающее окно, в котором 
пользователь вводит реальную дату прививки, опционально добавляет информацию о переносимости (например, "беспокоился, 
отмечен подъем температуры до 38.6") и нажимает Ok. При этом данные вносятся в БД Пациентов, а график дальнейшей
вакцинации автоматически пересчитывается с учетом сделанной прививки, данная прививка с внесенными данными появляется 
в перечне сделанных сверху. 

У пользователя (врача) также есть возможность вывести на экран график запланированных прививок всех его пациентов 
в опреденный период (неделя, месяц, квартал и т.п.).

2 компонент - WEB-контейнер - он отвечает за выполнение сервлетов и кода jsp-страниц, в рамках него Web-сервер обрабатывает
запросы, поступающие от клиента, и отправляет ответы с динамическим содержимым в виде html страницы. Отвечает за выдачу страниц в UI.
Для его реализации использован Apache TomEE.

3 компонент - EJB (Enterprise JavaBeans) контейнер для реализации бизнес-логики и доступа к базам данных. Здесь реализуется:
- проверка вводимых данных на релевантность
- поиск информации о пользователе в БД
- сохранение нового пользователя в БД
- расчет базового графика прививок на основе данных JSON файла со сроками прививок от даты рождения (используется JSON Processing API)
- сохранение введенных пользователем данных по сделанным прививкам в базу данных пациентов
- перерасчет графика в соответствии с датами сделанных прививок и необходимыми промежутками между вакцинами (здесь
будут формулы по расчету каждой вакцины с учетом необходимого промежутка согласно инструкции к вакцине и другими 
сделанными прививками).

4 компонент - собственно, база данных, реализованная на MySQL. Представляет собой базу данных пациентов по данному 
мед. учреждению. По каждому пациенту хранятся ID, имя, фамилия, контактные данные, дата рождения и данные обо всех сделанных
прививках с указанием даты и (при наличии) особенностей переносимости, а также привязка ко врачу, которую может помнять Администратор 
БД всего медучреждения. А также на этом уровне находится БД пользователей с логинами-паролями (в зашифрованном виде) и группировкой 
по ролям. И JSON файл, используемый для расчета первоначального графика на основе нац. календаря.

Взаимодействие: 

- В рамках J2EE сервер будет взаимодействовать с клиентом, используя удаленный вызов методов Java RMI 
(Remote Method Invocation). 

- Доступ к БД осуществляется с помощью Java Database Connectivity (JDBC) - это API для доступа к табличным источникам данных, 
например базам данных SQL, электронным таблицам и простым файлам.

Обоснование выбора:
- J2EE самая известная платформа для разработки бизнес-приложений, отличается высокой надежностью.
- J2EE предоставляет поддержку множества сервисов в рамках одной платформы, что удобно для разработчика.
- EJB Контейнер реализует оперативное соединение с БД, поддерживая  пул открытых соединений, которые можно выделять объекту EJB 
и забирать обратно по мере необходимости.
- Безопасность реализуется на базе Java Authentication and Authorization Service (JAAS), который позволяет осуществлять 
аутентификацию и авторизацию пользователей и распределение их ролей для разграничения доступа (например, врач не может удалить
БД пациентиов для всего медучреждения и т.п.).
- J2EE поддерживает масштабируемость, что позволяет повышать производительность и отвечать на возрастающую нагрузку. 
Производительность повышается за счет упомянутых выше пулов соединений с БД, а также за счет возможности распределить нагрузку
путем развертывания одних и тех же компонентов либо логически отдельных частей приложения на нескольких серверах.

